#!/usr/bin/env bash

# If not running interactively, don't do anything
[[ -z "$PS1"  ]] && return
## load global definitions
if [[ -f /etc/bashrc ]]
then
    . /etc/bashrc
fi

## determine operation system
if [[ $OSTYPE = "linux-gnu" ]]; then
    export ostype="linux"
elif [[ $OSTYPE = "cygwin" ]]; then
    export ostype="cygwin"
elif [[ $OSTYPE = "darwin"* ]]; then
    export ostype="darwin"
elif [[ $OSTYPE = "msys" ]]; then
    export ostype="msys"
elif [[ $OSTYPE = "freebsd"* ]]; then
    export ostype="freebsd"
else
    export ostype="unknown"
fi

## determine root of bash-kit
export BASH_KIT_ROOT=$(dirname $(dirname $(readlink -e ~/.bashrc)))

### functions
# function path_not_in_PATH
# Test whether a path already exists in $PATH environment variable.
function path_not_in_PATH ()
{
    local OIFS

    OIFS=$IFS
    IFS=':'
    is_new_path="true"
    for path in $PATH
    do
        if [[ $path = $1 ]]
        then
            is_new_path="false"
            break
        fi
    done
    IFS=$OIFS

    echo $is_new_path
}

# function add_new_PATH
# Add path to head of $PATH environment variable if path is not in $PATH
function add_new_PATH ()
{
    if [[ $(path_not_in_PATH $1) = "true" ]]
    then
        export PATH=$1:$PATH
    else
        echo "$1 already in \$PATH environment variable!"
    fi

    return 0
}

# function emacs_compile_dir
# Batch compile all elisp files under path. The last argument is path to be
# recompiled, all the other arguments is paths to be prepended to emacs
# load-path
function emacs_compile_dir ()
{
    command="emacs --batch -Q -L ."
    count=0
    for dir in $*
    do
        (( count++ ))
        if [[ "$count" -eq "$#" ]]
        then
            command="$command -f batch-byte-compile $dir/*.el"
        else
            command="$command -L $dir"
        fi
    done
    $command
}

### Environment variables
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export TERM=xterm-256color
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=1000
export HISTFILESIZE=2000
add_new_PATH $HOME/bin
add_new_PATH $HOME/.local/bin
add_new_PATH $BASH_KIT_ROOT/bin

### Git configuration
if [ -f "$(which git)" ]; then
    . $BASH_KIT_ROOT/config/git-completion.bash
    . $BASH_KIT_ROOT/config/git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$(__git_ps1 "(%s)")\$ '
fi

### aliases
## git
alias gs="git status"
alias ga="git add"
alias gaa="git add --all ."
alias gc="git commit"
alias gb="git branch"
alias gbd="git branch -d"
alias gch="git checkout"
alias gd="git diff"
alias gp="git push"
alias gl="git pull"
alias gr="git remote"

## misc
alias ls="ls -hF --color=tty"
alias ll="ls -lAh1v --group-directories-first"
alias v="vim"
alias vi="vim"
alias e="emacsclient -nw"
alias em="emacs"
alias emb="emacs_compile_dir"
alias mkdir="mkdir -pv"

# Case-insensitive globbing
shopt -s nocaseglob
# Autocorrect typos in path names
shopt -s cdspell

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

### Key bindings
# By default, shell will apply Emacs key bindings. If you are familiar with
# Vim key bindings and would like to use Vim key bindings for command-line
# editing, just comment out the following line.
# bindkey -v

### Miscs
# Append to the history file, don't overwrite it
shopt -s histappend
# Swap ctrl and caps
[[ -x /usr/bin/setxkbmap ]] && setxkbmap -option ctrl:swapcaps

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

## User env vars
# Env vars may be useful: LD_LIBRARY_PATH, HDF5_ROOT, GTAGSCONF, CYGWIN_ROOT,
# GTD_ROOT, DROPBOX_ROOT, MIDNIGHT_ROOT
# SUGAR's vars: SUGAR, SUGAR_PRE, BROADR_POOL
ENV_VAR_FILE="$BASH_KIT_ROOT/env-var.sh"
if [[ -f $ENV_VAR_FILE ]]
then
    source $ENV_VAR_FILE
fi
